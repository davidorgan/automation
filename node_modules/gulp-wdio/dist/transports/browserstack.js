'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Browserstack = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _browserstacktunnelWrapper = require('browserstacktunnel-wrapper');

var _browserstacktunnelWrapper2 = _interopRequireDefault(_browserstacktunnelWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Browserstack = exports.Browserstack = function (_EventEmitter) {
  (0, _inherits3.default)(Browserstack, _EventEmitter);

  function Browserstack(options) {
    (0, _classCallCheck3.default)(this, Browserstack);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Browserstack.__proto__ || (0, _getPrototypeOf2.default)(Browserstack)).call(this));

    _this.options = {
      key: options.key,
      hosts: [{
        name: options.host,
        port: options.port,
        sslFlag: 0
      }],
      onlyAutomate: true
    };

    _this.tunnel = new _browserstacktunnelWrapper2.default(options);
    return _this;
  }

  (0, _createClass3.default)(Browserstack, [{
    key: 'start',
    value: function start() {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {
        _this2.tunnel.start(function (error) {
          if (error) {
            _this2.emit('error', error);
            reject(error);
            return;
          }

          _this2.emit('start', 'Tunnel opened');
          resolve();
        });
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      var _this3 = this;

      if (this.tunnel.state !== 'started') {
        return new _promise2.default(function (resolve) {
          return resolve();
        });
      }

      return new _promise2.default(function (resolve, reject) {
        _this3.tunnel.stop(function (error) {
          if (error) {
            _this3.emit('error', error);
            reject(error);
            return;
          }

          _this3.emit('stop', 'Tunnel closed');
          resolve();
        });
      });
    }
  }]);
  return Browserstack;
}(_events2.default);