'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

var _gulpUtil = require('gulp-util');

var _gulpUtil2 = _interopRequireDefault(_gulpUtil);

var _launcher = require('webdriverio/build/lib/launcher');

var _launcher2 = _interopRequireDefault(_launcher);

var _browserstack = require('./transports/browserstack');

var _selenium = require('./transports/selenium');

var _hollow = require('./transports/hollow');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transports = {
  browserstack: _browserstack.Browserstack,
  selenium: _selenium.Selenium,
  hollow: _hollow.Hollow
};

function emitError(error) {
  var _this = this;

  // Don't listen for yourself
  if (error instanceof _gulpUtil2.default.PluginError) {
    return;
  }

  process.stdin.pause();

  var pluginError = new _gulpUtil2.default.PluginError({
    plugin: 'gulp-wdio',
    message: error
  });

  process.nextTick(function () {
    _this.emit('error', pluginError);
  });
}

exports.default = function (options) {
  var wdioOptions = options.wdio;
  var Transport = transports[options.type || 'hollow'];

  return _through2.default.obj(function obj(file, encoding, callback) {
    var wdio = new _launcher2.default(file.path, wdioOptions);
    var config = wdio.configParser.getConfig();

    var transport = new Transport(config);
    var showError = emitError.bind(this);

    transport.on('error', showError);

    transport.on('message', _gulpUtil2.default.log.bind(_gulpUtil2.default));
    transport.on('start', _gulpUtil2.default.log.bind(_gulpUtil2.default));
    transport.on('stop', _gulpUtil2.default.log.bind(_gulpUtil2.default));

    this.on('finish', function () {
      return transport.stop();
    });

    // Hail Mary, not sure if this would work though, since action is async
    process.on('uncaughtException', function () {
      return transport.stop();
    });
    process.on('exit', function () {
      return transport.stop();
    });

    transport.start().then(function () {
      return wdio.run().then(function (code) {
        if (code !== 0) {
          showError('wdio exited with code ' + code);
          transport.stop();
        } else {
          process.stdin.pause();
        }

        callback();
      });
    }).catch(showError);

    return this;
  });
};

module.exports = exports['default'];